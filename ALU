module ALU(clk, rst, a, b, buttons, row_switch,mode_select, FND1, FND1Sel, FND2, FND2Sel, 
FND3, FND3Sel, overflow, sign, memory_button, switches, led_full, memory_overflow, memory_sign, zero_flag);

    input clk;
    input rst;
    input [15:0] buttons; 
    input mode_select;
    input a, b;
    input memory_button;
    input [2:0] switches; 
    input [2:0] row_switch;
    
    output [6:0] FND2, FND1, FND3;
    output [1:0] FND2Sel, FND1Sel, FND3Sel;
    output overflow, sign;
    output [7:0] led_full; 
	 output zero_flag;
	 
	 output memory_sign, memory_overflow;

	 reg zero_flag;
    reg [6:0] FND2, FND1, FND3;
    reg [1:0] FND1Sel, FND2Sel, FND3Sel;
    reg [3:0] op;	
		
    integer ai = 0, bi = 0;
    integer hex1 = 0, hex2 = 0;
    integer result;
    reg sign;
    reg overflow;

    wire [6:0] FND1Val2, FND1Val1, FND2Val1, FND2Val2, FND3Val1, FND3Val2;
    wire clk100Hz, clk10Hz, clk1Hz;
    wire [3:0] rand_a, rand_b;
    wire [3:0] random_op;
    wire [3:0] memory_hex1, memory_hex2;
	 wire memory_sign, memory_overflow;
 
    MemoryManager mem_manager(clk, rst, memory_button,switches,row_switch,result,led_full,memory_hex1,memory_hex2,memory_sign, memory_overflow);


    ClockDivider clk100Hz_divider(clk, clk100Hz, 4999);
    ClockDivider clk10Hz_divider(clk, clk10Hz, 49999);
    ClockDivider clk1Hz_divider(clk, clk1Hz, 499999);
    Random rand(clk1Hz, rst, a, b, rand_a, rand_b, random_op);



 
   
    always @(posedge clk or negedge rst)
    begin
        if (!rst)
        begin
            op <= 4'b0000; 
        end 
        else 
        begin
            if (mode_select == 1'b1)
            begin
                op <= random_op; 
            end 
            else 
            begin
                case (buttons)
                    16'b0000_0000_0000_0001: op <= 4'b0000; 
                    16'b0000_0000_0000_0010: op <= 4'b0001; 
                    16'b0000_0000_0000_0100: op <= 4'b0010; 
                    16'b0000_0000_0000_1000: op <= 4'b0011; 
                    16'b0000_0000_0001_0000: op <= 4'b0100; 
                    16'b0000_0000_0010_0000: op <= 4'b0101; 
                    16'b0000_0000_0100_0000: op <= 4'b0110; 
                    16'b0000_0000_1000_0000: op <= 4'b0111; 
                    16'b0000_0001_0000_0000: op <= 4'b1000; 
                    16'b0000_0010_0000_0000: op <= 4'b1001; 
                    16'b0000_0100_0000_0000: op <= 4'b1010;
                    16'b0000_1000_0000_0000: op <= 4'b1011; 
                    16'b0001_0000_0000_0000: op <= 4'b1100; 
                    16'b0010_0000_0000_0000: op <= 4'b1101; 
                    16'b0100_0000_0000_0000: op <= 4'b1110; 
                    16'b1000_0000_0000_0000: op <= 4'b1111; 
                endcase
            end
        end
    end

    // ALU 연산 수행
    always @(posedge clk)
    begin
        ai = rand_a;
        bi = rand_b;
        case (op)
            4'b0000: result <= ai + bi;
            4'b0001: result <= ai - bi;
            4'b0010: result <= ai * bi;
            4'b0011: result <= (bi != 0) ? ai / bi : 0;
            4'b0100: result <= ai & bi;
            4'b0101: result <= ai | bi;
            4'b0110: result <= ai ^ bi;
            4'b0111: result <= ~(ai & bi)& 4'b1111;
            4'b1000: result <= ~(ai | bi)&4'b1111;
            4'b1001: result <= (ai ~^ bi)&4'b1111;
            4'b1010: result <= ai % bi;
            4'b1011: result <= (~ai)&4'b1111;
            4'b1100: result <= (~bi)&4'b1111;
            4'b1101: result <= (ai << 1);
            4'b1110: result <= (bi << 1);
            4'b1111: result <= (ai && bi);
            default : result <= 0;

        endcase
		
			if(result == 0)
				zero_flag <= 1;
			else 
				zero_flag <=0;
		  
        if (result < 0) 
		  begin
            sign = 1'b1;
            hex2 = -result / 16;
            hex1 = -result % 16;
        end 
		  else 
		  begin
            sign = 1'b0;
            hex2 = result / 16;
            hex1 = result % 16;
        end

        if (result > 15 || result < -15)
            overflow = 1'b1;
        else
            overflow = 1'b0;
    end

 
    SegmentDecoder decoder_ai(ai, FND1Val2);
    SegmentDecoder decoder_bi(bi, FND1Val1);
    SegmentDecoder decoder_hex2(hex2, FND2Val2);
    SegmentDecoder decoder_hex1(hex1, FND2Val1);
    SegmentDecoder decoder_mem2(memory_hex2, FND3Val2);
    SegmentDecoder decoder_mem1(memory_hex1, FND3Val1);


    always @(clk100Hz, clk10Hz, FND1Val1, FND1Val2, FND2Val1, FND2Val2, FND3Val1, FND3Val2,overflow)
    begin
        if(clk100Hz) 
        begin

            FND1Sel[0] = 1'b0;
            FND1Sel[1] = 1'b1;
            FND1 = FND1Val1;

            
            FND2Sel[0] = 1'b0;
            FND2Sel[1] = 1'b1;
            FND2 = FND2Val1;

            
            FND3Sel[0] = 1'b0;
            FND3Sel[1] = 1'b1;
            FND3 = FND3Val1;
            
        end 
        
        else 
        begin

            FND1Sel[0] = 1'b1;
            FND1Sel[1] = 1'b0;
            FND1 = FND1Val2;


            FND2Sel[0] = 1'b1;
            FND2Sel[1] = 1'b0;
            FND2 = FND2Val2;

            
            FND3Sel[0] = 1'b1;
            FND3Sel[1] = 1'b0;
            FND3 = FND3Val2;
            
        end
		  
		  if(overflow == 1'b1)
		  begin
				if(clk10Hz)
				begin
					FND1Sel[0] = 1'b1;
					FND1Sel[1] = 1'b0;
					FND1 = FND1Val2;


					FND2Sel[0] = 1'b1;
					FND2Sel[1] = 1'b0;
					FND2 = FND2Val2;
				end
				
				else
				begin
					FND1Sel[0] = 1'b0;
					FND1Sel[1] = 1'b1;
					FND1 = FND1Val1;

            
					FND2Sel[0] = 1'b0;
					FND2Sel[1] = 1'b1;
					FND2 = FND2Val1;
				end
		  end
    end
endmodule

//lfsr alogrithm, lfsr shift register
module Random(clk, rst, button_a, button_b, random_a, random_b, random_op);
    input clk; 
    input rst;
    input button_a; 
    input button_b; 
    output [3:0] random_a; 
    output [3:0] random_b; 
    output [3:0] random_op;

    reg [3:0] random_a; 
    reg [3:0] random_b;
    reg [3:0] random_op;

    reg [7:0] lfsr_a = 8'b10111001;
    reg [7:0] lfsr_b = 8'b11011011; 
    reg [7:0] lfsr_op = 8'b11100101;

    reg active_a = 0; 
    reg active_b = 0; 

    always @(posedge clk or negedge rst) 
    begin
         if(~rst)
         begin
            active_a <=0;
            active_b <= 0;
            random_a <= 0;
            random_b <= 0;
            random_op <= 0;
         end
         
         else
         begin
           if(button_a)
               active_a <=1;
            else
               active_a <=0;
            
            if(button_b)
               active_b <=1; 
            else
               active_b <=0;
               
           if (active_a) 
           begin
               lfsr_a <= {lfsr_a[6:0], lfsr_a[7] ^ lfsr_a[5]^lfsr_a[3]}; 
               random_a <= lfsr_a[3:0];
            
            end
           if (active_b) 
           begin
               lfsr_b <= {lfsr_b[6:0], lfsr_b[7] ^ lfsr_b[4]^lfsr_b[2]^lfsr_b[1]}; 
               random_b <= lfsr_b[3:0]; 
           end
           lfsr_op <= {lfsr_op[6:0], lfsr_op[7]^lfsr_op[5]^lfsr_op[3]^lfsr_op[0]};
           random_op <= lfsr_op[3:0];
         end
    end
endmodule

module ClockDivider(clk,clk_out,divider);

   input clk;
   input [31:0] divider;
   output clk_out;
   
   reg clk_out;
   reg [31:0] counter = 0;
   
   always @(posedge clk)
   begin
      if(counter >= divider)
      begin
         counter <= 0;
         clk_out <= ~clk_out;
      end
      else
         counter <= counter+1;
   end
endmodule 
   
   
module SegmentDecoder(value, segment);
   input [3:0] value;
   output [6:0] segment;
   
   reg [6:0] segment;
   
   always @(value)
   begin
      case(value)
         0 : segment = 7'b1111110;
         1 : segment = 7'B0110000;
         2 : segment = 7'B1101101;
         3 : segment = 7'B1111001;
         4 : segment = 7'B0110011;
         5 : segment = 7'B1011011;
         6 : segment = 7'B1011111;
         7 : segment = 7'B1110000;
         8 : segment = 7'B1111111;
         9 : segment = 7'B1110011;
         10 : segment = 7'B1111101;
         11 : segment = 7'B0011111;
         12 : segment = 7'B0001101;
         13 : segment = 7'B0111101;
         14 : segment = 7'B1101111;
         15 : segment = 7'B1000111;
			200 : segment = 7'b0000_001;
      endcase
   end
endmodule

module MemoryManager (clk, rst, memory_button, switches,row_switch, result, led_full, memory_hex1, memory_hex2, memory_sign, memory_overflow);
    input clk;
    input rst;
    input memory_button;
    input [2:0] row_switch;
    input [2:0] switches;
    input signed [31:0] result;
	 
    output [7:0] led_full;
    output [3:0] memory_hex1, memory_hex2;
	 output memory_sign, memory_overflow;

	 reg [7:0] led_full;
	 reg [3:0] memory_hex1, memory_hex2;
    reg signed [31:0] memory_array [0:7][0:5];
	 
	 reg memory_sign, memory_overflow;
	 
    integer prev_memory_button = 0;

    integer i, j,k;
	 //integer temp;

    always @(posedge clk or negedge rst)
	 begin
        if (!rst)
		  begin
            prev_memory_button <= 0;
            led_full <= 8'b0;
            for (i = 0; i < 8; i = i + 1)
				begin
                for (j = 0; j < 6; j = j + 1)
					 begin
                    memory_array[i][j] <= 0;
                end
            end
        end
		  
		  else 
		  begin
            if (memory_button && !prev_memory_button)
				begin
                if (row_switch < 6 && switches < 8)
					 begin
                    memory_array[switches][row_switch] <= result;
						  
						  led_full[switches] <=1;
						  
						  for(j = 0; j<5; j= j+1)
						  begin
								if(memory_array[switches][j] == 0)
									led_full[switches] <= 0;
						  end
                end
            end
            prev_memory_button <= memory_button;
			end
		end
	
    always @(posedge clk)
	 begin
        if (row_switch < 6 && switches < 8) 
		  begin  
				if (memory_array[switches][row_switch] > 15 || memory_array[switches][row_switch]< -15)
					memory_overflow = 1'b1;
			  else
					memory_overflow = 1'b0;
				
            if (memory_array[switches][row_switch] < 0) 
				begin
					 memory_sign = 1'b1;
                memory_hex2 <= -memory_array[switches][row_switch] / 16;
                memory_hex1 <= -memory_array[switches][row_switch] % 16;
            end 
				else
				begin
					 memory_sign = 1'b0;
                memory_hex2 <= memory_array[switches][row_switch] / 16;
                memory_hex1 <= memory_array[switches][row_switch] % 16;
            end
        end 
		  
		  else 
		  begin
            memory_hex2 <= 0;
            memory_hex1 <= 0;
        end
    end
endmodule

